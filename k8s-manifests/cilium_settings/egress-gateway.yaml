# Example Egress Gateway Policy for MicroK8s cluster with 3 nodes
# This example shows how to configure Cilium egress gateway for traffic routing

---
# Node labels for egress gateway selection
apiVersion: v1
kind: Node
metadata:
  name: lenovo-204
  labels:
    node-role.kubernetes.io/egress: ""
    egress-gateway: "primary"
    zone: "zone-a"
spec: {}
---
apiVersion: v1
kind: Node
metadata:
  name: lenovo-205
  labels:
    node-role.kubernetes.io/egress: ""
    egress-gateway: "secondary"
    zone: "zone-b"
spec: {}
---
apiVersion: v1
kind: Node
metadata:
  name: lenovo-206
  labels:
    node-role.kubernetes.io/egress: ""
    egress-gateway: "tertiary"
    zone: "zone-c"
spec: {}

---
# Primary egress gateway policy for all traffic
apiVersion: cilium.io/v2
kind: CiliumEgressGatewayPolicy
metadata:
  name: microk8s-egress-all
  namespace: kube-system
spec:
  selectors:
  - namespaceSelector:
      matchLabels:
        name: apk-system
  - podSelector:
      matchLabels:
        app: fortigate-service
  destinationCIDRs:
  - "0.0.0.0/0"
  egressGateway:
    nodeSelector:
      matchLabels:
        egress-gateway: "primary"
    interface: "eth0"
    egressIP: "93.85.81.204"  # Primary egress IP

---
# Secondary egress gateway for backup/load balancing
apiVersion: cilium.io/v2
kind: CiliumEgressGatewayPolicy
metadata:
  name: microk8s-egress-backup
  namespace: kube-system
spec:
  selectors:
  - namespaceSelector:
      matchLabels:
        name: apk-system
  destinationCIDRs:
  - "0.0.0.0/0"
  egressGateway:
    nodeSelector:
      matchLabels:
        egress-gateway: "secondary"
    interface: "eth0"
    egressIP: "93.85.81.205"  # Secondary egress IP

---
# Specific routing for external API calls
apiVersion: cilium.io/v2
kind: CiliumEgressGatewayPolicy
metadata:
  name: microk8s-egress-api
  namespace: kube-system
spec:
  selectors:
  - podSelector:
      matchLabels:
        app: radius-sniffer-service
  destinationCIDRs:
  - "8.8.8.8/32"      # Google DNS
  - "1.1.1.1/32"      # Cloudflare DNS
  - "api.fortinet.com/32"  # Fortinet API
  egressGateway:
    nodeSelector:
      matchLabels:
        egress-gateway: "primary"
    interface: "eth0"
    egressIP: "93.85.81.204"

---
# Database and internal service routing
apiVersion: cilium.io/v2
kind: CiliumEgressGatewayPolicy
metadata:
  name: microk8s-egress-database
  namespace: kube-system
spec:
  selectors:
  - podSelector:
      matchLabels:
        app: mysql-handler
  - podSelector:
      matchLabels:
        app: fastapi-sql
  destinationCIDRs:
  - "10.0.0.0/8"      # Internal networks
  - "172.16.0.0/12"   # Internal networks
  - "192.168.0.0/16"  # Internal networks
  egressGateway:
    nodeSelector:
      matchLabels:
        egress-gateway: "tertiary"
    interface: "eth0"
    egressIP: "93.85.81.206"  # Tertiary egress IP

---
# Monitoring and logging traffic
apiVersion: cilium.io/v2
kind: CiliumEgressGatewayPolicy
metadata:
  name: microk8s-egress-monitoring
  namespace: kube-system
spec:
  selectors:
  - podSelector:
      matchLabels:
        app: logging-service
  - podSelector:
      matchLabels:
        app: syslog-email-sender
  destinationCIDRs:
  - "10.3.1.0/24"     # Management network
  - "10.3.2.0/24"     # Monitoring network
  - "smtp.gmail.com/32"  # Email services
  egressGateway:
    nodeSelector:
      matchLabels:
        egress-gateway: "secondary"
    interface: "eth0"
    egressIP: "93.85.81.205"

---
# Load balancer configuration for egress traffic
apiVersion: v1
kind: Service
metadata:
  name: egress-gateway-lb
  namespace: kube-system
  labels:
    app: egress-gateway
spec:
  type: LoadBalancer
  externalIPs:
  - "93.85.81.204"  # Primary
  - "93.85.81.205"  # Secondary
  - "93.85.81.206"  # Tertiary
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  - port: 443
    targetPort: 443
    protocol: TCP
    name: https
  selector:
    app: egress-gateway

---
# Network policy for egress gateway nodes
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: egress-gateway-netpol
  namespace: kube-system
spec:
  podSelector:
    matchLabels:
      node-role.kubernetes.io/egress: ""
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: apk-system
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53
    - protocol: ICMP

---
# ConfigMap for egress gateway configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: egress-gateway-config
  namespace: kube-system
data:
  config.yaml: |
    egress_gateway:
      primary:
        node: "lenovo-204"
        ip: "93.85.81.204"
        interface: "eth0"
        priority: 1
      secondary:
        node: "lenovo-205"
        ip: "93.85.81.205"
        interface: "eth0"
        priority: 2
      tertiary:
        node: "lenovo-206"
        ip: "93.85.81.206"
        interface: "eth0"
        priority: 3
      
    routing_rules:
      - name: "api-traffic"
        destinations: ["8.8.8.8/32", "1.1.1.1/32", "api.fortinet.com/32"]
        gateway: "primary"
      - name: "internal-traffic"
        destinations: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
        gateway: "tertiary"
      - name: "monitoring-traffic"
        destinations: ["10.3.1.0/24", "10.3.2.0/24", "smtp.gmail.com/32"]
        gateway: "secondary"
